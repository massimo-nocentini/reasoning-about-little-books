2014-01-26  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* scheme-interpreter/scheme-interpreter-tests.sml
	(SchemeInterpreterTests.recursive_length): Finally the Y is still
	magnificent with Cons and their friends!

2014-01-18  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* scheme-interpreter/scheme-interpreter.fun
	(SchemeInterpreterEnvironment): Update the scheme interpreter
	environment in order to use the new definitions specified in SEXP
	and SEXP_PARSER signatures.
	(SchemeInterpreterEnvironment.sexp_to_action): the `car' and the
	`quote' functions work!
	(SchemeInterpreterEnvironment.application_type.apply): factor the
	`Integer' and `Boolean' meaning into `Quotation' meaning in order
	to be more uniform (Lisp should do a similar thing, is it true?)

	* sexp-expressions/sexp-parser-SMLofNJ.sml (SEXP_PARSER_SMLofNJ):
	Moved the sexp parser in its own source file.

2014-01-12  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* scheme-interpreter/scheme-interpreter.fun
	(SchemeInterpreterEnvironment): add a first implementation of the
	environment for interpreting a Scheme expression.

	* scheme-interpreter/table.sig: refactored the functor for
	parameterizing on the type of `stuff' value too (as done for the
	type of identifier).

	* scheme-interpreter/table-tests.sml (TableTests.suite): add a
	suite of tests for the table implementation using two `parallel'
	lists.

	* scheme-interpreter/table.sig (TABLE): introduce a signature for
	the table concept and a first implementation of a functor to build
	TABLE structures.
	(MakeTableWithStringIdentifierAndDoubleListImpl): refined the
	implementation of the functor for the table in order to
	parameterize the identifier type, instead of setting it to
	`string'.

2014-01-06  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* little-mler/times-over-numbers.sig: add the signature for doing
	``times'' arithmetic.

	* little-mler/J-new-plus.sig (NewPlusOverJ): Add a new signature
	for the new functor in order to abstract deeply for the plus
	operation.

	* little-mler/similar.sig (similar): add the signature to check
	similarity among NUMBERS_BY_PEANO values.

	* little-mler/numbers-by-peano-second-version.sig: add a second
	version of the functor NumberAsInt in order provide a second
	alternative for using IntArith.plus. Write the corresponding test
	case.

2014-01-05  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* little-mler/little-mler.sml (LittleMLer): Finish the first way
	to use ``plus'' with the two sets of building blocks and reported
	the insightful text.

	* little-mler/little-mler-tests.sml (LittleMLerTests): add two
	tests that shows the first way of using ``plus'' with the two sets
	of building blocks.

	* little-mler/numbers-with-reveal-conceal.sig
	(NumberAsIntWithRevealConceal): Add a new signature to introduce
	two new functions in order to conceal and reveal the type in order
	to use ``plus'' with both Int building blocks and Num building
	blocks.

2014-01-04  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* little-mler/little-mler.sml (LittleMLer): first application of
	``plus'' for int arithmetic but get a compiler error.

	* little-mler/plus-over-number.sig: introduce a file for the
	signature and the functor for doing arithmetics.

	* little-mler/numbers-by-peano.sig (NumberAsNum): Implement the
	very first module for numbers as nums.

	* sexp-expressions/sources.cm: moved the sexp-expressions code in
	a dedicated folder with its own sources.cm file for compilation.

	* little-mler/numbers-by-peano.sig (NUMBERS_BY_PEANO): add the
	first signature file for the numbers by Peano.

	* observations-and-todos.org: add a ``journal'' file in the style
	of org-mode!

	* sexp-expressions.sml (SExpressions.parse.explode_fragment): add
	an explanation comment.
	(SExpressions.parse.minify_fraglist): add an explanation comment.

	* little-mler.sml (LittleMLer.prefixer): Adjust the function in
	order to make the test pass, we've to take apart the sexp produced
	by ``parse'' since we've to attach the given suffix.
	(LittleMLer.waiting_prefixer): We have to take apart the result
	otherwise we've to introduce an additional Cons in order to
	putting (List combined) onto the result.

	* sexp-expressions-tests.sml (SExpressionsTests): Fixed the tests
	in order to exercise both the curried both the staged version of
	combine_slist.

2014-01-03  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* little-mler.sml (LittleMLer): Introduce the ``prefixer''
	function and its variants, using the two strategy for combining
	slists.

	* sexp-expressions.sml (SExpressions.combine_slist_curried): Add
	the curried strategy for combining two slists.
	(SExpressions.combine_slist_staged): Add the staged strategy for
	combining two slists.
	(SExpressions.combine_sexp): Refactor the function in order to
	emphasize the differences among the two curried vs staged
	strategies for combining two slists.

2013-12-31  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* sexp-expressions-tests.sml (SExpressionsTests): Add the
	necessary tests for the ``combine'' function.

	* sexp-expressions.sml (SExpressions.combine_sexp): Add the
	implementation of the ``combine'' function, something similar to
	``@'' in Standard ML.

	* hop-skip-jump.sml (HopSkipAndJump.letcc): make a fun instead of
	a val in order to better type check it.

	* little-mler.sml: Big bang for this file.

	* Makefile: Add a new clause for running the tests and for running
	a scratch input pad.

	* test-input.sml: give a more SML structure for the suite running.

	* little-schemer-tests.sml (LittleSchemerTests): add the missing
	tests for the last five steps of Y derivation and add nine tests
	for the ``length'' function, using the three different techniques.

	* little-schemer.sml: removed unnecessary parens from patterns and
	introduce a unique parameter for ``fn arg => ...'' expressions in order
	to substitute it with ``case a of ...'' to have a better indentation.
	(LittleSchemer): add reference to
	http://www.cs.cornell.edu/courses/cs3110/2008fa/recitations/rec26.html
	to record the great help that page provide on the use of G for
	self application.

2013-12-29  Massimo Nocentini  <massimo.nocentini@gmail.com>

	* little-schemer.sml (LittleSchemer.length_with_collector): done
	some.
	(LittleSchemer.length_with_accumulator): imple.
	(LittleSchemer.length_with_collector.L): implementation of inner
	function L using the collector paradigm.
	(LittleSchemer.length_with_collector.L): hel

